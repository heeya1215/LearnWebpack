0. getting-started

[개요]
 - bundle.js 를 생성하여 index.html에서 사용
 - lo

[dependencies]
 - lodash

[STEP 1] 기존 ES5 방법으로 라이브러리(lodash) 로딩 (웹팩 사용 안함)
 1. html에서 cdn으로 로딩
    <script src="https://unpkg.com/lodash@4.16.6" />
 2. JS에서 ES5형식으로 코딩
 3. html에서 JS(ES5) 로딩
    <script src="app/es5.js" />

[STEP 2] webpack으로 라이브러리(lodash) 로딩 (ES6를 웹팩으로 빌드)
 1. npm으로 lodash 설치
 2. JS에서 ES6 방식으로 lodash를 모듈로서 로딩
    // in es6.js
    import _ from 'lodash';
 3. 웹팩으로 결과물(bundle.js) 생성
 4. html에서 결과물(bundle.js) 로딩
    <script src="dist/bundle.js" />

----------------------------------------------------------------------

1. Example 1 - Code Splitting

[개요]
 - CSS를 모듈로서 번들링
   (JS, HTML, CSS 등 모든 웹 자원은 모듈로서 로딩 가능하다.)
 
[dependencies]
 - css-loader
 - style-loader

[devDependencies]
 - extract-text-webpack-plugin
 - webpack, webpack-cli


[STEP 1] 기존 ES5 방법으로 CSS 로딩 (웹팩 사용 안함)
1. HTML에서 css들을 로딩
   <link rel="stylesheet" href="base1.css" />
   <link rel="stylesheet" href="base2.css" />

[STEP 2] webpack으로 CSS 로딩 (ES6를 웹팩으로 빌드)
1. JS에서 ES6 방식으로 css 모듈로서 로딩
	import '../base1.css';
	import '../base2.css';
2. 웹팩으로 결과물(bundle.js) 생성
3. html에서 결과물(bundle.js) 로딩
   * bundle.js에 JS와 CSS가 통합됨
 
[STEP 3] 통합CSS파일과 통합 JS 파일 분리
1. ExtractTextPlugin 파일을 이용하여 분리


의문점 ????
 1. 분리된 CSS 파일을 HTML에서 인클루딩 해야함
 2. 중복된 CSS 구문을 제거해주지 않음


----------------------------------------------------------------------

2. Example 2 - Libraries Code Splitting

[개요]
 - 여러개의 라이브러리(ex lodash, moment)를 사용할때
   최종 결과 파일이 중복되지 않도록 번들링
 
[dependencies]
 - moment
 - lodash

[devDependencies]
 - webpack, webpack-cli
 - webpack-manifest-plugin

[STEP 1] moment, lodash 로 기본 번들링 
 main.js / vender.js 파일에 중복 내용 발생

[STEP 2] splitChunks을 사용하여 중복 제거

[STEP 3] ManifestPlugin으로 'manifest.js/json 생성
 HTML에서 manifest.js를 로드하여
 , manifest.json의 매핑 이용 (manifest.json의 js를 HTML에서 로딩)
 * 결과물 파일이 chunkhash로 가변적일 경우 manifest로 파일명 명시


의문점 ????
 1. 결과물을 chunkhash로 생성하였을 경우 manifest 활용 방법

----------------------------------------------------------------------

3. Example 3 - Webpack Plugins & Resolve

[개요]
 1. reslove.alias로 로딩할 라이브러리(JQuery) 경로 설정
 2. ProvidePlugin으로 import 없이 라이브러리(JQuery) 로딩
 
[dependencies]
 - N/A

[devDependencies]
 - webpack, webpack-cli
 - jquery

아래 3가지 방법으로 JQuery 를 로딩 해본다.

[방법 1] 기본 방법
 node_module의 라이브러리를 JS에서 import 후 webpack으로 번들링

[방법 2] reslove.alias 경로 지정
 reslove.alias로 지정된 경로의 JS 로딩 후 webpack으로 번들링 

[방법 3] ProvidePlugin으로 로딩
 JS에서 import 하지 않아도 번들링 시에 node_module의 라이브러리를 자동 로딩

* ProvidePlugin으로
  Automatically load modules instead of having to import or require them everywhere.

----------------------------------------------------------------------

4. Example 4 - Webpack Dev Server

[개요]
 - Webpack Dev Server로 번들링(결과물 메모리에 저장) 및 실행
 - JS 변경 시 Hot 리로딩 확인

[dependencies]
 - N/A

[devDependencies]
 - webpack, webpack-cli
 - webpack-dev-server

----------------------------------------------------------------------

4. Example 4 - Webpack Dev Server

[개요]
 - Webpack Dev Server로 번들링(결과물 메모리에 저장) 및 실행
 - JS 변경 시 Hot 리로딩 확인

[dependencies]
 - N/A

[devDependencies]
 - webpack, webpack-cli
 - webpack-dev-server

 [STEP] 설정
  1. webpack.config.js에 devServer 설정
  2. package.json의 "scripts"에 "start": "webpack-dev-server" 등록

----------------------------------------------------------------------

5. Example 5 - Webpack Dev Middleware

[개요]
 - 기존 서버에 웹팩 연동(Middleware 연동) 확인
 - Webpack Dev Middleware로 번들링(결과물 메모리에 저장) 및 실행
 - JS 변경 시 Hot 리로딩 확인
 - publicPath 확인

[dependencies]
 - ejs

[devDependencies]
 - webpack, webpack-cli
 - express
 - webpack-dev-middleware

[STEP 1] 기존 서버 구성
 * Webpack 없이 express 서버 띄우기 (번들링 없음)
 1. server.js로 express 서버 생성
 2. node server.js

[STEP 2] 기존 서버에 webpack에서 컴파일한 파일 전달하는 middleware wrapper 구성
 * Webpack 설정 및 webpack-dev-middleware 연결
 1. webpack.config.js 생성
 2. server.js에 Webpack 설정 및 webpack-dev-middleware 연결

----------------------------------------------------------------------

----------------------------------------------------------------------

----------------------------------------------------------------------

추가 실습 1 . Example 1 연장

index.html
index.js
 - h3_red.css
 - p1_blue.css

index2.html
index2.js
 - h3_green.css
 - p1_blue.css


[확인 사항]
1. 다른 HTML에서 다른 CSS(같은 H3에 다른 효과) 최종 결과 확인
2. 다른 HTML에서 같은 CSS(p1_blue.css) 로딩 시에 최종 결과 확인






